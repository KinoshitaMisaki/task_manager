/*
 * style.css
 * This file is now primarily for custom styles not easily achievable with Tailwind CSS,
 * or for overriding specific component library styles (like Frappe Gantt or SortableJS)
 * that don't expose utility-friendly classes.
 *
 * Most general styling like layout, typography, spacing, colors, shadows
 * are now handled directly with Tailwind utility classes in index.html.
 */

/* ==================================================================================== */
/* Custom Styles for Frappe Gantt */
/* Frappe Ganttによって#gantt-target内に生成されるSVG要素の高さ調整 */
#gantt-target {
    min-height: 455px; /* Former min-height: 350px. Increased by 1.3 times. */
    overflow-x: auto; /* Enable horizontal scrollbar if Frappe Gantt's SVG content overflows */
    /* Other visual styles like background, padding, shadow are handled by Tailwind on #gantt-chart-area */

    /* Ganttチャートの内容が縦に長くなる場合にスクロールを有効にする */
    overflow-y: auto !important;
}

/* MODIFIED: Explicitly set the height of the main SVG element generated by Frappe Gantt */
/* User reported svg.gantt was 300px. This directly forces it to 455px,
 * ensuring the target height is achieved.
 * This rule targets the SVG element specifically within the #gantt-target div.
 */
#gantt-target svg {
    /* 縦スクロールを可能にするため、SVG自体の固定高さを削除。
       SVGはコンテンツに応じて高さを自動調整します。 */
}

/* ADDED: Styles for today's line */
.today-line {
    stroke: red !important; /* 赤い線 */
    stroke-width: 2 !important; /* 線の太さ */
    pointer-events: none !important; /* 線がクリックイベントをブロックしないようにする */
}

/* ADDED: Styles for Frappe Gantt text elements (larger font size) */
.gantt .bar-label, /* タスクバー上のラベル (タスク名) */
.gantt .date,      /* グリッドの日付ラベル */
.gantt .lower-text, /* その他の情報（依存関係など） */
#gantt-target svg text, /* 全てGanttチャートによって生成されるSVGテキスト要素 */
.gantt .upper-text { /* ヘッダーの日付など */
    font-size: 14px !important; /* デフォルトより少し大きくします。必要に応じて調整してください。 */
    font-weight: bold !important; /* NEW: 文字を太字に設定 */
    fill: black !important; /* MODIFIED: SVGのテキスト要素には 'fill' プロパティを使用 */
}

/* NEW: Styles for 'doing' tasks in Gantt chart (Orange) */
/* is_not_main の後に書くことで、doing の特異性が同じなら doing が優先される */
.gantt-task-doing .bar {
    fill: rgb(144, 255, 160) !important; /* Tailwind orange-500 に相当 */
}
.gantt-task-doing .bar-progress {
    fill: rgb(20, 117, 0) !important; /* Tailwind orange-600 に相当 (進捗バーは少し濃く) */
}

/* NEW: Styles for 'todo' tasks in Gantt chart (gray70くらいの黒) */
/* is_not_main の前に記述することで、is_not_main のタスク（紫）が優先されるようにします */
.gantt-task-todo .bar {
    fill: rgb(255, 143, 143) !important; /* Tailwind gray-600 相当 */
}
.gantt-task-todo .bar-progress {
    fill: rgb(255, 72, 72) !important; /* Tailwind gray-700 相当 (進捗バーは少し濃く) */
}

/* MODIFIED: Styles for is_not_main tasks in Gantt chart */
/* gantt-task-todo の後に記述することで、is_not_main が優先されるように変更 */
.gantt-task-not-main .bar {
    fill: #b4e1ff !important; /* 薄い紫色 (Tailwind purple-300相当) */
}
.gantt-task-not-main .bar-progress {
    fill: #506dff !important; /* 少し濃い目の紫 (Tailwind purple-400相当) */
}

/* NEW: Styles for dummy tasks to make them invisible */
.gantt-dummy-task {
    opacity: 0 !important; /* Make bar and text completely transparent */
    pointer-events: none !important; /* Ensure they don't interfere with mouse events */
}
.gantt-dummy-task text {
    fill: transparent !important; /* Ensure task name is transparent */
}
.gantt-dummy-task > rect { /* Specific selector for main bar rect */
    fill: transparent !important;
}
.gantt-dummy-task > rect.bar-progress { /* Specific selector for progress bar rect */
    fill: transparent !important;
}


/* ==================================================================================== */
/* Custom Styles for SortableJS */
/* These classes are applied during drag-and-drop operations */
.sortable-ghost {
    opacity: 0.5;
    background-color: theme('colors.gray.200'); /* Tailwind's gray-200 color */
    border: 2px dashed theme('colors.blue.500'); /* Tailwind's blue-500 color */
    border-radius: theme('borderRadius.md'); /* Match other elements' rounded corners */
}

/* ==================================================================================== */
/* Other minor custom adjustments not practical with Tailwind */

/* Base list item style where needed, if Tailwind is not fully applied to li elements */
/* In this setup, active task items get Tailwind directly, but this is a fallback for others. */
.task-list,
.task-list-condensed {
    list-style-type: none;
    padding-left: 0;
}

/* Ensuring no bottom border on the last item of these lists */
/* This is often handled by Tailwind's `divide-y` & `last:border-b-0` but kept for robustness. */
.task-list li:last-child,
.task-list-condensed li:last-child {
    border-bottom: none;
}

/* Flex grow/shrink/basis for specific IDs for 2:3 ratio */
/* Tailwindのクラスとの優先順位を確実にするため !important を追加 */
#task-list-area {
    flex: 2 1 0% !important; /* flex-grow: 2, flex-shrink: 1, flex-basis: 0% */
    height: 500px !important;
    min-width: 0 !important; /* Ensures shrinking */
    overflow-y: auto !important;
}

#gantt-chart-area {
    flex: 3 1 0% !important; /* flex-grow: 3, flex-shrink: 1, flex-basis: 0% */
    min-width: 0 !important; /* Ensures shrinking */
    /* task-list-area の高さに合わせ、固定します */
    height: 500px !important; 
    /* gantt-chart-area 自体はスクロールさせず、子要素にスクロールを任せます */
    overflow-y: hidden !important; 
}

/* ★★★ ADDED: 全ての li 要素の左ボーダーを初期状態で強制的にリセット ★★★ */
/* デフォルトで灰色の枠線を追加 */
#active-tasks-ul li.task-item {
    /*border: 1px solid #d47878 !important; /* 灰色の枠線を追加 */
    background-color: rgb(212, 227, 251) !important;
    border-right-width: 5px !important;
    border-right-style: solid !important;
    border-right-color: rgb(0, 14, 204);
}


/* NEW: Styles for tasks due within a week (Orange) - ユーザーからの最新の指定を適用 */
#active-tasks-ul li.task-item.task-status-pending { /* 新しいクラス名でオレンジの背景と枠線 */
    background-color: rgb(255, 213, 165) !important; /* ユーザー指定の新しい色 */
    border-right-width: 20px !important;
    border-right-style: solid !important; /* 明示的にsolidスタイルを指定 */
    border-right-color: rgb(255, 106, 0) !important; /* ユーザー指定の新しい色 */
}

/* NEW: Styles for overdue tasks (Red) - ユーザーからの最新の指定を適用 */
#active-tasks-ul li.task-item.task-status-overdue { /* 新しいクラス名で赤の背景と枠線 */
    background-color: rgb(255, 135, 135) !important; /* ユーザー指定の新しい色 */
    border-right-width: 40px !important;
    border-right-style: solid !important; /* 明示的にsolidスタイルを指定 */
    border-right-color: rgb(255, 0, 0) !important; /* ユーザー指定の新しい色 */
}

/* ★★★ ADDED: is_not_main が True のタスクに対するカスタムカラー ★★★ */

/* is_not_main: 通常時 (青) */
#active-tasks-ul li.task-item.task-is-not-main-default {
    border: 3px solid #90a2ff !important; 
    background-color: rgb(255, 255, 255) !important; /* 少し明るい青 */
    border-right-width: 5px !important;
    border-right-style: solid !important;
    border-right-color: rgb(0, 14, 204) !important; /* 青 */
}

/* is_not_main: limit_date より一週間前 (紫) */
#active-tasks-ul li.task-item.task-is-not-main-pending {
    border: 3px solid #ffa33a !important; 
    background-color: rgb(255, 255, 255) !important; /* 少し明るい紫 */
    border-right-width: 20px !important;
    border-right-style: solid !important;
    border-right-color: rgb(255, 106, 0) !important; /* 紫 */
}

/* is_not_main: 期限切れ (赤) */
#active-tasks-ul li.task-item.task-is-not-main-overdue {
    border: 3px solid #fa5151 !important; 
    background-color: rgb(255, 255, 255) !important; /* 期限切れタスクの既存の赤と同じ */
    border-right-width: 40px !important;
    border-right-style: solid !important;
    border-right-color: rgb(220, 0, 0) !important; /* 期限切れタスクの既存の赤と同じ */
}

/* MODIFIED: Style for tasks with status 'doing' - moved to the end, now uses box-shadow for full border */
#active-tasks-ul li.task-item.task-status-doing-border { /* 全体を囲む緑の枠線 */
    box-shadow: 0 0 0 4px rgb(34, 197, 94) !important; /* 0オフセット、0ぼかし、2pxのスプレッド、緑色 */
}