/*
 * style.css
 * This file is now primarily for custom styles not easily achievable with Tailwind CSS,
 * or for overriding specific component library styles (like Frappe Gantt or SortableJS)
 * that don't expose utility-friendly classes.
 *
 * Most general styling like layout, typography, spacing, colors, shadows
 * are now handled directly with Tailwind utility classes in index.html.
 */

/* ==================================================================================== */
/* Custom Styles for Frappe Gantt */
/* Frappe Ganttによって#gantt-target内に生成されるSVG要素の高さ調整 */
#gantt-target {
    height: 350px; /* Fixed height for the Gantt chart viewport */
    overflow-x: auto; /* Enable horizontal scrollbar if Frappe Gantt's SVG content overflows */
    /* Other visual styles like background, padding, shadow are handled by Tailwind on #gantt-chart-area */
}

#gantt-target svg {
    /* This makes the SVG fill the entire height of #gantt-target,
     * distributing space evenly if there are fewer tasks.
     * Frappe Gantt typically scales its content within the SVG viewport.
     */
    height: 100%;
}

/* ★★★ ADDED: Styles for today's line ★★★ */
.today-line {
    stroke: red !important; /* 赤い線 */
    stroke-width: 2 !important; /* 線の太さ */
    pointer-events: none; /* 線がクリックイベントをブロックしないようにする */
}
/* ★★★ ADDED: Styles for is_not_main tasks in Gantt chart ★★★ */
.gantt-task-not-main .bar {
    fill: #d8b4fe !important; /* 薄い紫色 (Tailwind purple-300相当) */
}
.gantt-task-not-main .bar-progress {
    fill: #a78bfa !important; /* 少し濃い目の紫 (Tailwind purple-400相当) */
}

/* NEW: Styles for dummy tasks to make them invisible */
.gantt-dummy-task {
    opacity: 0 !important; /* Make bar and text completely transparent */
    pointer-events: none !important; /* Ensure they don't interfere with mouse events */
}
.gantt-dummy-task text {
    fill: transparent !important; /* Ensure task name is transparent */
}
.gantt-dummy-task > rect { /* Specific selector for main bar rect */
    fill: transparent !important;
}
.gantt-dummy-task > rect.bar-progress { /* Specific selector for progress bar rect */
    fill: transparent !important;
}


/* ==================================================================================== */
/* Custom Styles for SortableJS */
/* These classes are applied during drag-and-drop operations */
.sortable-ghost {
    opacity: 0.5;
    background-color: theme('colors.gray.200'); /* Tailwind's gray-200 color */
    border: 2px dashed theme('colors.blue.500'); /* Tailwind's blue-500 color */
    border-radius: theme('borderRadius.md'); /* Match other elements' rounded corners */
}

/* ==================================================================================== */
/* Other minor custom adjustments not practical with Tailwind */

/* Base list item style where needed, if Tailwind is not fully applied to li elements */
/* In this setup, active task items get Tailwind directly, but this is a fallback for others. */
.task-list, 
.task-list-condensed { 
    list-style-type: none;
    padding-left: 0;
}

/* Ensuring no bottom border on the last item of these lists */
/* This is often handled by Tailwind's `divide-y` & `last:border-b-0` but kept for robustness. */
.task-list li:last-child,
.task-list-condensed li:last-child {
    border-bottom: none; 
}

/* Flex grow/shrink/basis for specific IDs for 2:3 ratio */
/* Tailwindのクラスとの優先順位を確実にするため !important を追加 */
#task-list-area {
    flex: 2 1 0% !important; /* flex-grow: 2, flex-shrink: 1, flex-basis: 0% */
    min-width: 0 !important; /* Ensures shrinking */
}

#gantt-chart-area {
    flex: 3 1 0% !important; /* flex-grow: 3, flex-shrink: 1, flex-basis: 0% */
    min-width: 0 !important; /* Ensures shrinking */
}

/* MODIFIED: Style for tasks with status 'doing' - changed to orange */
/* 直接RGB値を指定した方でうまくいったとのことなので、こちらに統一 */
#active-tasks-ul li.task-item.task-status-doing { /* セレクタの詳細度を上げた */
    background-color: rgb(255, 247, 237) !important; /* Tailwindのorange-100に相当 */
    border-left-color: rgb(249, 115, 22) !important;  /* Tailwindのorange-500に相当 */
}